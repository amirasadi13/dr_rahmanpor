{"version":3,"file":"toastify-simply-react.min.js","sources":["../src/hooks/toastFunction.js","../src/hooks/toastType.js","../src/hooks/index.js","../src/hooks/toast.js","../src/components/index.js","../src/components/Toast.js","../src/renderProps/toastType.js","../src/renderProps/index.js","../src/renderProps/toast.js","../src/renderProps/toastFunction.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction useToastFunction(toastRef) {\n    const [toast, setToast] = useState(null);\n    useEffect(() => {\n        if (toastRef.current && toastRef.current.toast) {\n            setToast(() => toastRef.current.toast);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [toastRef, toastRef.current]);\n    return toast;\n}\n\nexport default useToastFunction;","function useToastType(toast, defaultOptions = {}) {\n    const types = [\"warn\", \"success\", \"error\", \"info\", \"primary\"];\n    const toastType = {};\n    types.map(type => toastType[type] = (message, options = defaultOptions) => toast(message, type, options));\n    return toastType;\n}\n\nexport default useToastType;","import toastHook from \"./toast\";\n\nconst hooks = { useToast: toastHook };\n\nexport const useToast = toastHook;\nexport default hooks;","import { useRef } from \"react\";\nimport useToastFunction from \"./toastFunction\";\nimport useToastType from \"./toastType\";\n\nfunction useToast(options = {}) {\n    const toastRef = useRef();\n    const toast = useToastFunction(toastRef);\n    const toastType = useToastType(toast, options);\n    return [toastType, toastRef];\n}\n\nexport default useToast;","import ToastComponent from \"./Toast\";\n\nconst components = { Toast: ToastComponent };\n\nexport const Toast = ToastComponent;\nexport default components;","import React, { Component } from \"react\";\nimport \"../scss/components/Toast.scss\";\n\nclass Toast extends Component {\n    state = {\n        visible: false,\n        type: \"primary\",\n        message: \"\",\n        transitionDirection: \"right\",\n        position: \"top-right\",\n        timeout: 5000\n    }\n    toastTimeout = null;\n    throwToast = (message, type, options) => {\n        const { transitionDirection, position, timeout } = options;\n        const validPositions = [\"top-right\", \"top-left\", \"top-center\", \"bottom-right\", \"bottom-left\", \"bottom-center\"];\n        const validTypes = [\"warn\", \"success\", \"error\", \"info\", \"primary\"];\n        this.setState({ message, type: [...validTypes].includes(type) ? type : \"primary\", transitionDirection, position: [...validPositions].includes(position) ? position || \"top-right\" : \"top-right\", timeout: timeout || 5000 }, () => {\n            setTimeout(() => {\n                this.setState({ visible: true }, () => {\n                    this.toastTimeout = setTimeout(() => {\n                        if (this.state.visible) {\n                            this.setState({ visible: false });\n                        }\n                    }, this.state.timeout);\n                });\n            }, 250);\n        });\n    }\n    toast = (message, type, options = {}) => {\n        if (this.state.visible) {\n            clearTimeout(this.toastTimeout);\n            this.setState({ visible: false }, () => {\n                setTimeout(() => {\n                    this.throwToast(message, type, options);\n                }, 250);\n            });\n        } else {\n            this.throwToast(message, type, options);\n        }\n    }\n    closeToast = () => {\n        clearTimeout(this.toastTimeout);\n        this.setState({ visible: false });\n    }\n    determineShiftDirection = (position, transitionDirection) => {\n        const directions = position.split(\"-\");\n        if (directions.includes(\"center\")) {\n            return directions[0];\n        } else {\n            if (directions.includes(transitionDirection)) {\n                return transitionDirection;\n            } else {\n                return directions[1];\n            }\n        }\n    }\n    renderToast = (message, visible, type) => {\n        const { transitionDirection, position } = this.state;\n        const shiftDirection = this.determineShiftDirection(position, transitionDirection);\n        return <div onClick={this.closeToast} className={`${\"toast\"} ${visible ? \"show\" : \"hide\"}-${shiftDirection} ${type} ${position}`}>{message}</div>\n    }\n    render() {\n        const { message, visible, type } = this.state;\n        return (<>{this.renderToast(message, visible, type)}</>);\n    }\n}\n\nexport default Toast;","const toastType = (toast, defaultOptions = {}) => {\n    const types = [\"warn\", \"success\", \"error\", \"info\", \"primary\"];\n    const toastTypeConst = {};\n    types.map(type => toastTypeConst[type] = (message, options = defaultOptions) => toast(message, type, options));\n    return toastTypeConst;\n}\n\nexport default toastType;","import toast from \"./toast\";\nimport toastFunc from \"./toastFunction\";\n\nconst renderProps = {\n    toastClass: toast,\n    toastFunction: toastFunc\n};\n\nexport const toastClass = toast;\nexport const toastFunction = toastFunc;\nexport default renderProps;","import { createRef } from \"react\";\n\nconst toastClass = (options = {}) => {\n    class ToastRef {\n        toastRef = createRef();\n    }\n    const toastRef = new ToastRef();\n    return toastRef;\n}\n\nexport default toastClass;","import toastType from \"./toastType\";\n\nconst toastFunction = (toastRef, options = {}) => {\n    const toast = toastRef.current.toast;\n    const toastTypeConst = toastType(toast, options);\n    return toastTypeConst;\n}\n\nexport default toastFunction;"],"names":["useToastFunction","toastRef","useState","toast","setToast","useEffect","current","useToastType","defaultOptions","types","toastType","map","type","message","options","useToast","useRef","Toast","Component","visible","transitionDirection","position","timeout","setState","includes","setTimeout","toastTimeout","_this","state","clearTimeout","throwToast","directions","split","shiftDirection","determineShiftDirection","React","onClick","closeToast","className","this","renderToast","toastTypeConst","toastClass","createRef","toastFunction"],"mappings":"8wEAEA,SAASA,EAAiBC,WACIC,WAAS,SAA5BC,OAAOC,cACdC,aAAU,WACFJ,EAASK,SAAWL,EAASK,QAAQH,OACrCC,GAAS,kBAAMH,EAASK,QAAQH,WAGrC,CAACF,EAAUA,EAASK,UAChBH,ECVX,SAASI,EAAaJ,OAAOK,yDAAiB,GACpCC,EAAQ,CAAC,OAAQ,UAAW,QAAS,OAAQ,WAC7CC,EAAY,UAClBD,EAAME,KAAI,SAAAC,UAAQF,EAAUE,GAAQ,SAACC,OAASC,yDAAUN,SAAmBL,EAAMU,EAASD,EAAME,OACzFJ,MCAEK,ECAb,eAAkBD,yDAAU,GAClBb,EAAWe,WACXb,EAAQH,EAAiBC,GACzBS,EAAYH,EAAaJ,EAAOW,SAC/B,CAACJ,EAAWT,23DCJVgB,oPCDOC,0LACR,CACJC,SAAS,EACTP,KAAM,UACNC,QAAS,GACTO,oBAAqB,QACrBC,SAAU,YACVC,QAAS,4BAEE,2BACF,SAACT,EAASD,EAAME,OACjBM,EAA2CN,EAA3CM,oBAAqBC,EAAsBP,EAAtBO,SAAUC,EAAYR,EAAZQ,UAGlCC,SAAS,CAAEV,QAAAA,EAASD,KAAM,UADZ,CAAC,OAAQ,UAAW,QAAS,OAAQ,YACTY,SAASZ,GAAQA,EAAO,UAAWQ,oBAAAA,EAAqBC,SAAU,UAF1F,CAAC,YAAa,WAAY,aAAc,eAAgB,cAAe,kBAEuCG,SAASH,IAAYA,GAA0B,YAAaC,QAASA,GAAW,MAAQ,WACzNG,YAAW,aACFF,SAAS,CAAEJ,SAAS,IAAQ,aACxBO,aAAeD,YAAW,WACvBE,EAAKC,MAAMT,WACNI,SAAS,CAAEJ,SAAS,MAE9BQ,EAAKC,MAAMN,cAEnB,2BAGH,SAACT,EAASD,OAAME,yDAAU,GAC1Ba,EAAKC,MAAMT,SACXU,aAAaF,EAAKD,gBACbH,SAAS,CAAEJ,SAAS,IAAS,WAC9BM,YAAW,aACFK,WAAWjB,EAASD,EAAME,KAChC,WAGFgB,WAAWjB,EAASD,EAAME,2BAG1B,WACTe,aAAaF,EAAKD,gBACbH,SAAS,CAAEJ,SAAS,yCAEH,SAACE,EAAUD,OAC3BW,EAAaV,EAASW,MAAM,YAC9BD,EAAWP,SAAS,UACbO,EAAW,GAEdA,EAAWP,SAASJ,GACbA,EAEAW,EAAW,4BAIhB,SAAClB,EAASM,EAASP,SACae,EAAKC,MAAvCR,IAAAA,oBAAqBC,IAAAA,SACvBY,EAAiBN,EAAKO,wBAAwBb,EAAUD,UACvDe,uBAAKC,QAAST,EAAKU,WAAYC,UAAc,mBAAWnB,EAAU,OAAS,mBAAUc,cAAkBrB,cAAQS,IAAaR,4DAGhG0B,KAAKX,MAAhCf,IAAAA,QAASM,IAAAA,QAASP,IAAAA,YAClBuB,gCAAGI,KAAKC,YAAY3B,EAASM,EAASP,yCChEhDF,EAAY,SAACP,OAAOK,yDAAiB,GACjCC,EAAQ,CAAC,OAAQ,UAAW,QAAS,OAAQ,WAC7CgC,EAAiB,UACvBhC,EAAME,KAAI,SAAAC,UAAQ6B,EAAe7B,GAAQ,SAACC,OAASC,yDAAUN,SAAmBL,EAAMU,EAASD,EAAME,OAC9F2B,GCIEC,ECNM,kBAIE,6CAFFC,iBDKNC,EEPS,SAAC3C,OAAUa,yDAAU,GACjCX,EAAQF,EAASK,QAAQH,MACzBsC,EAAiB/B,EAAUP,EAAOW,UACjC2B"}